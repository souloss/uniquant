//! `AppError` generated by ftl-codegen. DO NOT EDIT.



use std::collections::HashMap;
use thiserror::Error;



#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Category {
    Success,
    Error,
}

#[derive(Debug, Error)]
pub enum AppError {
    #[error("Success")]
    Success,
    #[error("Bad request")]
    BadRequest {
        message: String,
    }
    ,
    #[error("Unauthorized")]
    Unauthorized,
    #[error("Forbidden")]
    Forbidden,
    #[error("Not found")]
    NotFound {
        resource: String,
        identifier: Option<String>,
    }
    ,
    #[error("Conflict")]
    Conflict {
        resource: String,
        identifier: String,
    }
    ,
    #[error("Validation Error")]
    Validation {
        errors: Option<HashMap<String, String>>,
    }
    ,
    #[error("Internal server error")]
    Internal,
    #[error("Database error")]
    Database {
        message: String,
    }
    ,
}

impl AppError {
    pub fn code(&self) -> i32 {
        match self {
            Self::Success { .. } => 0,
            Self::BadRequest { .. } => 4000,
            Self::Unauthorized { .. } => 4001,
            Self::Forbidden { .. } => 4003,
            Self::NotFound { .. } => 4004,
            Self::Conflict { .. } => 4009,
            Self::Validation { .. } => 4010,
            Self::Internal { .. } => 5000,
            Self::Database { .. } => 5001,
        }
    }

    pub fn category(&self) -> Category {
        match self {
            Self::Success { .. } => Category::Success,
            Self::BadRequest { .. } => Category::Error,
            Self::Unauthorized { .. } => Category::Error,
            Self::Forbidden { .. } => Category::Error,
            Self::NotFound { .. } => Category::Error,
            Self::Conflict { .. } => Category::Error,
            Self::Validation { .. } => Category::Error,
            Self::Internal { .. } => Category::Error,
            Self::Database { .. } => Category::Error,
        }
    }

    pub fn as_key(&self) -> &'static str {
        match self {
            Self::Success { .. } => "success-success",
            Self::BadRequest { .. } => "error-bad_request",
            Self::Unauthorized { .. } => "error-unauthorized",
            Self::Forbidden { .. } => "error-forbidden",
            Self::NotFound { .. } => "error-not_found",
            Self::Conflict { .. } => "error-conflict",
            Self::Validation { .. } => "error-validation",
            Self::Internal { .. } => "error-internal",
            Self::Database { .. } => "error-database",
        }
    }

    pub fn description(&self) -> &'static str {
        match self {
            Self::Success { .. } => "Success",
            Self::BadRequest { .. } => "Bad request",
            Self::Unauthorized { .. } => "Unauthorized",
            Self::Forbidden { .. } => "Forbidden",
            Self::NotFound { .. } => "Not found",
            Self::Conflict { .. } => "Conflict",
            Self::Validation { .. } => "Validation Error",
            Self::Internal { .. } => "Internal server error",
            Self::Database { .. } => "Database error",
        }
    }

    pub fn http_status(&self) -> u16 {
        match self {
            Self::Success { .. } => 200,
            Self::BadRequest { .. } => 400,
            Self::Unauthorized { .. } => 401,
            Self::Forbidden { .. } => 403,
            Self::NotFound { .. } => 404,
            Self::Conflict { .. } => 409,
            Self::Validation { .. } => 422,
            Self::Internal { .. } => 500,
            Self::Database { .. } => 500,
        }
    }

    pub fn to_args(&self) -> HashMap<String, String> {
        let mut map = HashMap::new();
        match self {
            Self::Success { .. } => {},
            Self::BadRequest { message } => {
                map.insert("message".to_string(), message.to_string());
            },
            Self::Unauthorized { .. } => {},
            Self::Forbidden { .. } => {},
            Self::NotFound { resource, identifier } => {
                map.insert("resource".to_string(), resource.to_string());
                if let Some(v) = &identifier { map.insert("identifier".to_string(), v.to_string()); }
            },
            Self::Conflict { resource, identifier } => {
                map.insert("resource".to_string(), resource.to_string());
                map.insert("identifier".to_string(), identifier.to_string());
            },
            Self::Validation { errors } => {
                if let Some(v) = &errors { map.insert("errors".to_string(), format!("{:?}", v)); }
            },
            Self::Internal { .. } => {},
            Self::Database { message } => {
                map.insert("message".to_string(), message.to_string());
            },
        }
        map
    }
}